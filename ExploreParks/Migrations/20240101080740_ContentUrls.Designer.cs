// <auto-generated />
using System;
using ExploreParks.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExploreParks.Migrations
{
    [DbContext(typeof(ExploreParksDbContext))]
    [Migration("20240101080740_ContentUrls")]
    partial class ContentUrls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ExploreParks.Models.ContinentModel", b =>
                {
                    b.Property<int>("ContinentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContinentName")
                        .HasColumnType("TEXT");

                    b.HasKey("ContinentId");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("ExploreParks.Models.CountryModel", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContinentModelContinentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.HasIndex("ContinentModelContinentId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ExploreParks.Models.ParkModel", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountryModelCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkArea")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkEstablished")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkName")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("ParkId");

                    b.HasIndex("CountryModelCountryId");

                    b.ToTable("Parks");
                });

            modelBuilder.Entity("ExploreParks.Models.getDescription", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentUrls")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("NearestCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkLatitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkLongitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkName")
                        .HasColumnType("TEXT");

                    b.HasKey("ParkId");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("ExploreParks.Models.CountryModel", b =>
                {
                    b.HasOne("ExploreParks.Models.ContinentModel", null)
                        .WithMany("Countries")
                        .HasForeignKey("ContinentModelContinentId");
                });

            modelBuilder.Entity("ExploreParks.Models.ParkModel", b =>
                {
                    b.HasOne("ExploreParks.Models.CountryModel", null)
                        .WithMany("Parks")
                        .HasForeignKey("CountryModelCountryId");
                });

            modelBuilder.Entity("ExploreParks.Models.ContinentModel", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("ExploreParks.Models.CountryModel", b =>
                {
                    b.Navigation("Parks");
                });
#pragma warning restore 612, 618
        }
    }
}
